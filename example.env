# use cf-stable if you are exposing the app over Cloudflare Argo Tunnels (highly recommended for ease of use and low cost) -- forward localhost:3000 and localhost:3001 each to their own subdomains (what you set for CLIENT and SERVER_ENDPOINTS))
APP_VERSION=cf-stable  
CLIENT_ENDPOINT=https://record.your-domain.com
SERVER_ENDPOINT=https://audioserver.your-domain.com
CLIENT_PORT=3000
SERVER_PORT=3001
 
# If you want your data to be forwarded to S3, you need this. Otherwise it will save locally to the data folder mounted to the server container
export AWS_ACCESS_KEY_ID=replace
export AWS_SECRET_ACCESS_KEY=replace
export AWS_S3_ENDPOINT=https://s3.your-domain.com



# The following is required if you are deploying on Azure container instances (cheapest non-shared cloud hosting option for container deployments)

ORG_NAME=narclab
LOCATION=eastus
RESOURCE_GROUP=${ORG_NAME}-audio-recording
NSG_NAME=narcaudiorecordingNsg
CONTAINER_VERSION_SERVER=1.31
CONTAINER_VERSION_CLIENT=2.72
PROJECT_NAME=${ORG_NAME}-audio-recording

AZ_LOCATION=eastus
AZ_BASE_URL=azurecontainer.io
AZ_ENV_NAME=${ORG_NAME}-container-apps

CONTAINER_NAME_SERVER=audio-recording-server
CONTAINER_NAME_CLIENT=${PROJECT_NAME}
CONTAINER_NAME_WHISPER=whisper
CONTAINER_NAME_REVERSE_PROXY=audio-recording-reverse-proxy

# Change this if you built your own custom image
DOCKER_IMAGE_SERVER=jackgray/${CONTAINER_NAME_SERVER}:v${CONTAINER_VERSION_SERVER}
DOCKER_IMAGE_CLIENT=jackgray/audio-recording-client:v${CONTAINER_VERSION_CLIENT}
DOCKER_IMAGE_WHISPER=ahmetoner/openai-whisper-asr-webservice:latest
DOCKER_IMAGE_REVERSE_PROXY=jackgray/audio-recording-reverse-proxy:latest
DNS_NAME_LABEL_SERVER=${PROJECT_NAME}-server
DNS_NAME_LABEL_CLIENT=${PROJECT_NAME}

EXPRESS_PORT=8080
CLIENT_PORT=443
CLIENT_PORT_SSL=443
WHISPER_PORT=9000
REVERSE_PROXY_PORT=443
SERVER_PORT=443

CLIENT_FQDN=
CLIENT_ENDPOINT=https://audio.${ORG_NAME}.com
NGINX_CLIENT_NAME=audio.${ORG_NAME}.com
NGINX_SERVER_NAME=audioserver.${ORG_NAME}.com
SERVER_ENDPOINT=https://audioserver.narclab.com
WHISPER_ENDPOINT=${CONTAINER_NAME_WHISPER}:${WHISPER_PORT}/asr


FILE_VOLUME_ACCOUNT_NAME=${ORG_NAME}audiostorage
FILE_VOLUME_ACCOUNT_KEY=
FILE_VOLUME_SHARE_NAME=${ORG_NAME}audiofileshare

KEYVAULT_NAME=${ORG_NAME}audiokeyvault

SSL_PATH=/app/data/ssl

CLIENT_SSL_KEY_FILE=client_ssl.key
CLIENT_SSL_CHAIN_FILE=client_ssl_chain.crt
CLIENT_SSL_CERT_FILE=client_ssl.crt
CLIENT_SSL_CA_FILE=client_ssl.ca-bundle

SERVER_SSL_KEY_FILE=server_ssl.key
SERVER_SSL_CERT_FILE=server_ssl.crt
SERVER_SSL_CA_FILE=server_ssl.ca-bundle


LOCAL_CERTIFICATE_PATH=/etc/letsencrypt/live/"${CLIENT_ENDPOINT}"  # Change this to your actual certificate path
REMOTE_CERTIFICATE_FULLCHAIN_PATH=certificates/fullchain.pem
REMOTE_CERTIFICATE_PRIVKEY_PATH=certificates/privkey.pem

# Challenge data from Certbot output
CHALLENGE_DATA="paste output from certbot"

# Challenge file name from Certbot output
CHALLENGE_FILE_NAME="name of your acme challenge file"

# The directory structure that you want to create
CHALLENGE_PATH=".well-known/acme-challenge"

# Do the same for the ssl certs
SSL_CERT_DATA="paste ssl cert here"


SSL_KEY_DATA="paste encryped private key contents here"


